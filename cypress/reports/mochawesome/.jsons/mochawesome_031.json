{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 2,
    "pending": 2,
    "failures": -1,
    "start": "2025-03-20T20:41:09.290Z",
    "end": "2025-03-20T20:41:09.736Z",
    "duration": 446,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 50,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "120e0255-c38b-4275-8650-1de5b474911d",
      "title": "",
      "fullFile": "cypress/e2e/api.cy.js",
      "file": "cypress/e2e/api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0e8942f7-faad-49d4-95ad-ef50328bf907",
          "title": "make api requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET request",
              "fullTitle": "make api requests GET request",
              "timedOut": null,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://jsonplaceholder.typicode.com/posts').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.length).to.be.greaterThan(0);\n  expect(response.body[1].title).to.eq('qui est esse'); //VERIFY TITLE IS PRESENT IN ARRAY[1]\n  expect(response.body.some(verifyTitle => verifyTitle.title === 'qui est esse')).to.be.true; //VERIFY TITLE IS PRESENT SOMEWHERE IN THE BODY\n  cy.log('first 2', response.body.slice(0, 2));\n  // PRINTS TITLE TO CYPRESS RUNNER\n  response.body.slice(0, 2).forEach(element => {\n    cy.log(element.title);\n  });\n  // VERIFIES IF TTFB IS GOOD\n  if (response.duration < 100) {\n    cy.log('TTFB great');\n  } else {\n    cy.log('TFFB not great');\n  }\n  // cy.writeFile('cypress/fixtures/get.json', response.body) //WRITES THE DATA TO A  FIXTURE FILE\n  // expect(response.body).to.include('qui est esse'); // won't work because the response body is an array\n  // expect(response.body).to.be.jsonSchema(schema); // Need to pre-define schema and do npm install chai-json-schema \n});",
              "err": {},
              "uuid": "e2cb35c5-a755-47d1-8e35-4b0f22953798",
              "parentUUID": "0e8942f7-faad-49d4-95ad-ef50328bf907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST request with invalid credentials",
              "fullTitle": "make api requests POST request with invalid credentials",
              "timedOut": null,
              "duration": 331,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'https://reqres.in/api/login',\n  body: {\n    email: 'test',\n    password: 'test'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {},
              "uuid": "a9ec5c88-e39e-4b5d-80e9-6ce5f7d21bc9",
              "parentUUID": "0e8942f7-faad-49d4-95ad-ef50328bf907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST request with valid credentials",
              "fullTitle": "make api requests POST request with valid credentials",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "cy.fixture('users.json').then(valid => {\n  cy.request({\n    method: 'POST',\n    url: 'https://reqres.in/api/login',\n    body: {\n      email: valid.apiUser.email,\n      password: valid.apiUser.password\n    }\n    // failOnStatusCode: false\n  }).then(response => {\n    expect(response.status).to.eq(200);\n  });\n});",
              "err": {},
              "uuid": "54a3d015-86fa-4de0-ab1d-6b4b644cae85",
              "parentUUID": "0e8942f7-faad-49d4-95ad-ef50328bf907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST request with masked valid credentials",
              "fullTitle": "make api requests POST request with masked valid credentials",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "cy.fixture('users.json').then(valid => {\n  const maskemail = '****@***.com';\n  const maskpwd = '*****';\n  cy.request({\n    method: 'POST',\n    url: 'https://reqres.in/api/login',\n    body: {\n      email: valid.apiUser.email,\n      password: valid.apiUser.password\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    console.log(maskemail + 'and' + maskpwd);\n  });\n});",
              "err": {},
              "uuid": "499576be-1bf2-4d96-9ce0-dd7c5ab8fbea",
              "parentUUID": "0e8942f7-faad-49d4-95ad-ef50328bf907",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2cb35c5-a755-47d1-8e35-4b0f22953798",
            "a9ec5c88-e39e-4b5d-80e9-6ce5f7d21bc9"
          ],
          "failures": [],
          "pending": [
            "54a3d015-86fa-4de0-ab1d-6b4b644cae85",
            "499576be-1bf2-4d96-9ce0-dd7c5ab8fbea"
          ],
          "skipped": [],
          "duration": 424,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome/.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "setupNodeEvents": "[Function setupNodeEvents]"
      },
      "version": "6.2.0"
    }
  }
}